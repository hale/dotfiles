runtime macros/matchit.vim
set nocompatible
set shell=/bin/sh

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

filetype plugin indent on

" appearance
set background=dark
let base16colorspace=256
colorscheme base16-default
filetype plugin indent on
syntax on
set colorcolumn=80
set cursorline
highlight clear SignColumn
highlight clear LineNr

" mouse support
set mouse=a
set mousehide

scriptencoding utf-8

" shared clipboard
set clipboard=unnamed

" store way more history (default is 20)
set history=5000

" spell checking on
set spell

" allow buffer switching without saving
set hidden

" Instead of reverting the cursor to the last position in the buffer, we set it
" to the first line when editing a git commit message
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" Setting up the directories
set backup
set undofile
set undolevels=1000 " maximum number ofchanges that can be undond
set undoreload=10000 " Maximum number of lines to save for undo on a buffer reload

" show the current mode
set showmode

set showmatch " show matching brackets
set incsearch " find as you type search
set hlsearch " highlight search results by default
set ignorecase " case insensitive search
set smartcase " use of capitals triggers case sensitive search
set scrolljump=1 " lines to jump when cursor leaves screen
set scrolloff=0 " minimum lines to keep above and below cursor
set nofoldenable " don't auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

" formatting
set nowrap
set autoindent " autoindent at same level as previous line
set expandtab " tabs become spaces
set shiftwidth=2 " 2 spaces for everything
set tabstop=2

set tw=100

" leader is ,
let mapleader = " "

" Yank from cursor to end of line, consistent with C and D
noremap Y y

" Quickly open/reload vim
nnoremap <leader>ev :split $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" toggle search highlighting
nmap <silent> <leader>/ :set invhlsearch<CR>

" Absolute line numbers in Normal mode, relative in Insert mode
set number relativenumber
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set number relativenumber

" ctags
let g:rails_ctags_arguments = ['--languages=ruby', '--extra=f']
map <leader>rt :Ctags<CR>
map <Leader>tt :TagbarToggle<CR>

" find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" visual shifting without exiting Visual mode
vnoremap < <gv
vnoremap > >gv

" for when you forget to sudo
cmap w!! w !sudo tee % >/dev/null

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" easier horizontal scrolling
map zl zL
map zh zH

" customize indent guides
let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

" PLUGIN vim-airline/vim-airlin

set laststatus=2
let g:airline_powerline_fonts = 1 " Hide fugitive changes - never use this
let g:airline#extensions#hunks#enabled = 0 " Hide branch name (we have powerline in the console for that)
let g:airline#extensions#branch#enabled = 0 " Hide the fileencoding / fileformat section
let g:airline_section_y = '' " hide the whitespace errors
let g:airline#extensions#whitespace#enabled = 0
let g:airline_theme='base16'

" folds
set foldmethod=indent
set foldlevel=999

" suppress warning about unsaved buffers
set shortmess+=A

" Cursor is block in NORMAL, pipe in INSERT (only works on OS X)
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" support for .owl syntax files
au BufNewFile,BufRead *.owl set filetype=xml
au BufNewFile,BufRead *.jess set filetype=lisp

" fix markdown filetype not recognised
au BufNewFile,BufRead *.md set filetype=markdown

" toggle syntastic hilighting
nmap <leader>st :SyntasticToggle<CR>

" use eslint instead of jshint
let g:syntastic_javascript_checkers = ['eslint']

" toggle paste mode
nmap <leader>p :set paste!<CR>

" removes the small delay between pressing escape and entering normal mode.
set ttimeoutlen=10
augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
augroup END

" Creating a split takes you there
set splitright
set splitbelow

" silver searcher quicker than ack
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ackprg = 'ag --nogroup --nocolor --column --ignore public/ --ignore static/'
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrl_use_caching = 0
endif

" dash.vim shortcut to show documentation
nmap <silent> <leader>d <Plug>DashGlobalSearch

" speed up vim startup
let g:ruby_path = system('echo $HOME/.rbenv/shims')

" speed up vim rendering
set lazyredraw

" git status lower precedence than syntax errors
let g:signify_sign_overwrite = 0
"
" Add support for markdown files in tagbar.
let g:tagbar_type_markdown = {
      \ 'ctagstype': 'markdown',
      \ 'ctagsbin' : 'markdown2ctags.py',
      \ 'ctagsargs' : '-f - --sort=yes',
      \ 'kinds' : [
      \ 's:sections',
      \ 'i:images'
      \ ],
      \ 'sro' : '|',
      \ 'kind2scope' : {
      \ 's' : 'section',
      \ },
      \ 'sort': 0,
      \ }

" .lvimrc security question answers are persisted
let g:localvimrc_persistent=2

" set home printer
set printdevice=Photosmart_B110_series

" set the width of the master pane
let g:dwm_master_pane_width=100

" check ruby style violations
nmap <silent> <leader>h :SyntasticCheck rubocop<CR>

" vroom - run tests easily
let g:vroom_use_vimux = 1
let g:vroom_use_binstubs = 1

" Run the current file with rspec
map <leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>
" Prompt for a command to run
map <leader>vp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
map <leader>vl :VimuxRunLastCommand<CR>
" Inspect runner pane
map <leader>vi :VimuxInspectRunner<CR>
" Close vim tmux runner opened by VimuxRunCommand
map <leader>vq :VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
map <leader>vx :VimuxInterruptRunner<CR>
" Zoom the runner pane (use <bind-key> z to restore runner pane)
map <leader>vz :call VimuxZoomRunner()<CR>
" vimux as tslime replacement; send buffer to repl
function! VimuxSlime()
  call VimuxSendText(@v)
  call VimuxSendKeys("Enter")
endfunction
vmap <leader>vs "vy :call VimuxSlime()<CR>
nmap <leader>vs vip<leader>vs<CR>

" override dwm vim shortcuts to remove ctrl+hjkl mappings, which break
" tmux-vim-navigator
let g:dwm_map_keys=0
nmap <C-,> <Plug>DWMRotateCounterclockwise
nmap <C-.> <Plug>DWMRotateClockwise
nmap <C-N> <Plug>DWMNew
nmap <C-C> <Plug>DWMClose
nmap <C-@> <Plug>DWMFocus
nmap <C-Space> <Plug>DWMFocus

" shortcut to grep current word
nmap <leader>F :Ack!<space>
nmap <leader>f :Ack! <C-r><C-w><cr>

" Save with leader-w
nmap <leader>w :wa<cr>

" save quit with leader-q
nmap <leader>q :wa<cr>:qa<cr>

" quit without saving with leader-Q
nmap <leader>Q :qa!<cr>

" initialize directories
function! InitializeDirectories()
  let parent = $HOME
  let prefix = 'vim'
  let dir_list = {
             \ 'backup': 'backupdir',
             \ 'views': 'viewdir',
             \ 'swap': 'directory',
             \ 'undo': 'undodir' }
  let common_dir = parent . '/.' . prefix

  for [dirname, settingname] in items(dir_list)
    let directory = common_dir . dirname . '/'
    if !isdirectory(directory)
      call mkdir(directory)
    endif
    if !isdirectory(directory)
      echo "Warning: Unable to create backup directory: " . directory
      echo "Try: mkdir -p " . directory
    else
      let directory = substitute(directory, " ", "\\\\ ", "g")
      exec "set " . settingname . "=" . directory
    endif
  endfor
endfunction
call InitializeDirectories()
