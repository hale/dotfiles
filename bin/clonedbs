#!/usr/bin/ruby
#
# USAGE
#
# clonedbs: clone every staging and production database to ~/opencounter/db/
# clonedbs <app_name> <app_name>: clone each <app_name> to ~/opencounter/db/
# clonedbs <app_name>: clone <app_name> to ~/opencounter/db/ and optionally restore
#
# TODO: support zoning-api on RDS
#

`mkdir -p ~/opencounter/db`

APPS = %w(opencounter-v1 opencounter-v1-staging opencounter-boston opencounter-boston-staging
          opencounter-v2 opencounter-v2-staging zoningcheck zoningcheck-staging
          opencounter-paloalto mvt-tileserver)

def clone(app)
  print "Cloning #{app}..."
  if app == "zoning-api"
    puts 'cant clone zoning api!'
    return
  #``
  else
    `heroku pg:backups:capture -a #{app}` if @capture
    `trash ~/opencounter/db/#{app}.dump`
    `curl -s -o ~/opencounter/db/#{app}.dump $(heroku pg:backups:public-url -a #{app})`
  end
  puts "...done"
end

puts "Capture new snapshot before cloning? (Y/N) N"
@capture = $stdin.gets.chomp.downcase == "y"

case ARGV.length
when 0
  APPS.each(&method(:clone))
when 1
  puts "Enter database to restore:"
  db = $stdin.gets.chomp
  app = ARGV[0]
  clone(app)

  `DISABLE_DATABASE_ENVIRONMENT_CHECK=1 bundle exec rake db:drop db:create && pg_restore --clean --no-acl --no-owner -h localhost -j 12 -d #{db} ../db/#{app}.dump`
else
  ARGV.each(&method(:clone))
end
